!<arch>
0-isupper.c/    0           0     0     644     224       `
#include "main.h"

/**
 * _isupper - checks is a character is uppercase
 * @c: carrier integer variable
 * Return: 1 if true, 0 if false
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	return (0);
}
0-memset.c/     0           0     0     644     296       `
#include "main.h"

/**
 * *_memset - fills memory with a constant byte.
 * @s: pointer to put the constant
 * @b: constant
 * @n: max bytes to use
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; n > 0; i++, n--)
	{
		s[i] = b;
	}

	return (s);
}
0-strcat.c/     0           0     0     644     376       `
#include "main.h"
/**
 * *_strcat - This function concatenates two strings
 *
 * @dest: The strings to be concatenated.
 *
 * @src: The second string to be concatenated.
 *
 * Return: dest
 */

char *_strcat(char *dest, char *src)
{
	int a = -1, i;

	for (i = 0; dest[i] != '\0'; i++)
		;

	do {
		a++;
		dest[i] = src[a];
		i++;
	} while (src[a] != '\0');

	return (dest);
}
100-atoi.c/     0           0     0     644     404       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: the string to be comverted.
 *
 *Return: The integer value of the comverted string.
 */

int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {

		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     216       `
#include "main.h"

/**
 * _isdigit - checks if a character is digit
 * @c: carrier variable
 * Return: 1 if true, 0 if false
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);

	else
		return (0);
}
1-memcpy.c/     0           0     0     644     292       `
#include "main.h"

/**
 * *_memcpy - copies memory area
 * @dest: memory area
 * @src: source
 * @n: length of src
 *
 * Return: pointer to dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     497       `
#include "main.h"
/**
 * *_strncat - This function concatenates two strings,
 * it uses at most n bytes from src.
 *
 * @dest: The first string to be apended.
 *
 * @src: The second apended string.
 *
 * @n: number of bytes.
 *
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int dest_len, i;

	for (dest_len = 0; dest[dest_len] != '\0'; dest_len++)
		;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[dest_len + i] = src[i];

	dest[dest_len + i] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     396       `
#include "main.h"

/**
 * _strchr - Locates a character in a string.
 * @s: The string to be searched.
 * @c: The character to be located.
 *
 * Return: If c is found - a pointer to the first occurence.
 * If c is not found - NULL.
 */

char *_strchr(char *s, char c)
{
	int index;

	for (index = 0; s[index] >= '\0'; index++)
	{
		if (s[index] == c)
			return (s + index);
	}

	return ('\0');
}
2-strlen.c/     0           0     0     644     214       `
#include "main.h"
/**
 * _strlen - This function checks the length of a string.
 *
 * @s: This accepts a string value
 *
 * Return: 0
 *
 */
int _strlen(char *s)
{
	int i = 0;

	while (s[i])
		i++;

	return (i);
}
2-strncpy.c/    0           0     0     644     363       `
#include "main.h"
/**
 * *_strncpy - This function copies a string.
 *
 * @dest: Pointer to a string.
 *
 * @src: Pointer.
 *
 * @n: int (number of copies).
 *
 * Return: dest.
 *
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];

	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     321       `
#include "main.h"
/**
 * _islower - Code entry point
 *
 * Description: This program checks for lowercase character.
 *
 * @c: The integer value it recieves
 *
 * Return: 0
 */
int _islower(int c)
{
	int i = 'a';

	for (i = 'a'; i <= 'z'; i++)
	{
		/* refer in c*/
		if (c == i)
		{
			return (1);
		}

	}
	return (0);
}

3-puts.c/       0           0     0     644     252       `
#include "main.h"
/**
 * _puts - A function prints a string followed by a new line.
 *
 * @str: This is the value assigned.
 *
 * Return: 0
 *
 */
void _puts(char *str)
{
	int i = 0;

	while (str[i])
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     382       `
#include "main.h"
/**
 * _strcmp - This function compares two strings.
 *
 * @s1: String 1.
 *
 * @s2: String 2.
 *
 * Return: 0 if the compared strings are similar,
 * and ns1 - ns2 of they are dissimilar.
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	}
	return (0);
}
3-strspn.c/     0           0     0     644     538       `
#include "main.h"

/**
 * _strspn - Gets the length of a prefix substring.
 * @s: The string to be searched.
 * @accept: The prefix to be measured.
 *
 * Return: The number of bytes in s which
 * consist only of bytes from accept.
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int bytes = 0;
	int index;

	while (*s)
	{
		for (index = 0; accept[index]; index++)
		{
			if (*s == accept[index])
			{
				bytes++;
				break;
			}

			else if (accept[index + 1] == '\0')
				return (bytes);
		}

		s++;
	}

	return (bytes);
}
4-isalpha.c/    0           0     0     644     471       `
#include "main.h"
/**
 * _isalpha - Code entry.
 *
 * Description: A function that checks for alphabetic character.
 *
 * @c: The integer value it recieves
 *
 * Return: 0
 */
int _isalpha(int c)
{
	char cap_alphabet, icap_alphabet;

	for (cap_alphabet = 'a'; cap_alphabet <= 'z'; cap_alphabet++)
	{
		for (icap_alphabet = 'A'; icap_alphabet <= 'Z'; icap_alphabet++)
		{
			if ((cap_alphabet == c) || (icap_alphabet == c))
			{
				return (1);
			}
		}
	}
	return (0);
}

4-strpbrk.c/    0           0     0     644     459       `
#include "main.h"

/**
 * _strpbrk - Searches a string for any of a set of bytes.
 * @s: The string to be searched.
 * @accept: The set of bytes to be searched for.
 *
 * Return: If a set is matched - a pointer to the matched byte.
 * If no set is matched - NULL.
 */
char *_strpbrk(char *s, char *accept)
{
	int index;

	while (*s)
	{
		for (index = 0; accept[index]; index++)
		{
			if (*s == accept[index])
				return (s);
		}

		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     675       `
#include "main.h"

/**
 * _strstr - Locates a substring.
 * @haystack: The string to be searched.
 * @needle: The substring to be located.
 *
 * Return: If the substring is located - a pointer to the beginning
 *                                       of the located substring.
 * If the substring is not located - NULL.
 */

char *_strstr(char *haystack, char *needle)
{
	int index;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;

			} while (haystack[index] == needle[index]);
		}

		haystack++;
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     360       `
#include "main.h"
/**
 * _abs - Code entry point.
 *
 * @number: number is a positive or negative integer
 *
 * Description: A fuction that computes the absolute value of an integer.
 *
 * Return: int
 */
int _abs(int number)
{
	int result;

	if (number < 0)
	{
		result = number * -1;
		return (result);
	}
	else
	{
		result = number;
		return (result);
	}
}
9-strcpy.c/     0           0     0     644     390       `
#include "main.h"

/**
 * *_strcpy -  copies the string pointed to by src
 * @dest: char type string
 * @src: char type string
 * Description: Copy the string pointed to by pointer `src` to
 * the buffer pointed to by `dest`
 * Return: Pointer to `dest
 */

char *_strcpy(char *dest, char *src)
{
	int i = -1;

	do {
		i++;
		dest[i] = src[i];
	} while (src[i] != '\0');

	return (dest);
}
_putchar.c/     0           0     0     644     251       `
#include <unistd.h>
/**
 * _putchar - writes the character c to the stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
 int _putchar(char c)
{
	return (write(1, &c, 1));
}

